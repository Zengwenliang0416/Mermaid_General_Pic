# Mermaid 图表配置文件
# 可以定义多个图表，每个图表需要指定名称和代码

diagrams:
  # 1. 序列图示例 - API 调用流程
  flow_diagram:
    name: "API调用流程"
    code: |
      sequenceDiagram
        participant Client as 客户端
        participant Gateway as API网关
        participant Auth as 认证服务
        participant Service as 业务服务
        participant DB as 数据库

        Client->>Gateway: 1. 发送API请求
        Gateway->>Auth: 2. 验证令牌
        Auth-->>Gateway: 3. 验证结果
        
        alt 验证通过
            Gateway->>Service: 4. 转发请求
            Service->>DB: 5. 查询数据
            DB-->>Service: 6. 返回数据
            Service-->>Gateway: 7. 返回结果
            Gateway-->>Client: 8. 响应请求
        else 验证失败
            Gateway-->>Client: 8. 返回401错误
        end

  # 2. 序列图示例 - 登录流程
  login_sequence:
    name: "用户登录流程"
    code: |
      sequenceDiagram
        participant U as 用户
        participant C as 客户端
        participant S as 服务器
        participant DB as 数据库
        
        U->>C: 1. 输入用户名密码
        C->>S: 2. 发送登录请求
        S->>DB: 3. 验证凭据
        DB-->>S: 4. 验证结果
        
        alt 登录成功
            S->>S: 5. 生成令牌
            S-->>C: 6. 返回令牌
            C->>C: 7. 保存令牌
            C-->>U: 8. 显示成功
        else 登录失败
            S-->>C: 5. 返回错误
            C-->>U: 6. 显示错误
        end

  # 3. 流程图示例 - 订单处理
  order_flow:
    name: "订单处理流程"
    code: |
      graph TD
        A[开始] --> B[收到订单]
        B --> C{库存检查}
        C -->|库存充足| D[创建订单]
        C -->|库存不足| E[通知补货]
        E --> F[等待库存]
        F --> C
        D --> G[支付处理]
        G -->|支付成功| H[订单确认]
        G -->|支付失败| I[订单取消]
        H --> J[发货处理]
        J --> K[完成]
        I --> K

  # 4. 流程图示例 - 错误处理
  error_flow:
    name: "错误处理流程"
    code: |
      graph TD
        A[检测到错误] --> B{错误类型}
        B -->|网络错误| C[重试请求]
        B -->|权限错误| D[检查权限]
        B -->|系统错误| E[记录日志]
        C --> F{重试成功?}
        F -->|是| G[继续处理]
        F -->|否| H[通知管理员]
        D --> I[更新权限]
        E --> H
        H --> J[结束]
        G --> J

  # 5. 类图示例 - 用户管理系统
  user_system:
    name: "用户管理系统"
    code: |
      classDiagram
        class User {
          +String id
          +String username
          +String email
          +String password
          +Date createdAt
          +Boolean isActive
          +login()
          +logout()
          +updateProfile()
        }
        
        class Role {
          +String id
          +String name
          +String[] permissions
          +assignTo(User)
          +removeFrom(User)
        }
        
        class Permission {
          +String id
          +String name
          +String resource
          +String action
        }
        
        class UserProfile {
          +String userId
          +String fullName
          +String avatar
          +String phone
          +updateInfo()
        }

        User "1" -- "1" UserProfile
        User "1" -- "n" Role
        Role "1" -- "n" Permission

  # 6. 状态图示例 - 订单状态
  order_state:
    name: "订单状态流转"
    code: |
      stateDiagram-v2
        [*] --> Created: 创建订单
        Created --> Paid: 支付成功
        Created --> Cancelled: 超时/取消
        Paid --> Processing: 开始处理
        Processing --> Shipped: 已发货
        Shipped --> Delivered: 已送达
        Delivered --> Completed: 确认收货
        Delivered --> Returned: 申请退货
        Returned --> Refunded: 退款完成
        Cancelled --> [*]
        Completed --> [*]
        Refunded --> [*]

  # 7. 实体关系图示例
  er_diagram:
    name: "数据库ER图"
    code: |
      erDiagram
        USER ||--o{ ORDER : places
        USER {
          string id
          string name
          string email
          date created_at
        }
        ORDER ||--|{ ORDER_ITEM : contains
        ORDER {
          string id
          string user_id
          decimal total
          string status
          date created_at
        }
        ORDER_ITEM {
          string id
          string order_id
          string product_id
          int quantity
          decimal price
        }
        PRODUCT ||--o{ ORDER_ITEM : "ordered in"
        PRODUCT {
          string id
          string name
          string description
          decimal price
          int stock
        }

  # 8. 甘特图示例 - 项目计划
  project_plan:
    name: "项目开发计划"
    code: |
      gantt
        title 项目开发时间线
        dateFormat YYYY-MM-DD
        section 需求阶段
        需求分析: 2024-01-01, 7d
        需求评审: 2024-01-08, 3d
        section 设计阶段
        系统设计: 2024-01-11, 10d
        UI设计: 2024-01-15, 8d
        section 开发阶段
        后端开发: 2024-01-22, 20d
        前端开发: 2024-01-25, 15d
        section 测试阶段
        单元测试: 2024-02-10, 5d
        集成测试: 2024-02-15, 5d
        系统测试: 2024-02-20, 8d
        section 部署阶段
        环境准备: 2024-02-28, 3d
        系统部署: 2024-03-02, 2d
        系统上线: 2024-03-04, 1d

  # 9. 饼图示例
  pie_chart:
    name: "资源分配"
    code: |
      pie title 项目资源分配
        "开发" : 40
        "测试" : 20
        "设计" : 15
        "运维" : 15
        "管理" : 10

  # 10. 用户旅程图
  user_journey:
    name: "用户购物旅程"
    code: |
      journey
        title 用户购物体验
        section 浏览商品
          打开首页: 5: 用户
          搜索商品: 4: 用户
          查看详情: 4: 用户
        section 购买流程
          加入购物车: 5: 用户
          结算: 3: 用户,系统
          支付: 3: 用户,系统
        section 收货流程
          等待发货: 2: 系统
          物流运输: 3: 系统
          签收: 5: 用户
        section 售后服务
          评价: 4: 用户
          售后支持: 3: 用户,客服

  # 11. 思维导图示例
  mindmap:
    name: "项目架构思维导图"
    code: |
      mindmap
        root((项目架构))
          前端架构
            Vue3框架
              组件系统
              状态管理
              路由系统
            UI框架
              ElementPlus
              定制主题
            工程化
              Vite
              TypeScript
          后端架构
            SpringBoot
              接口设计
              安全认证
              缓存系统
            数据库
              MySQL主从
              Redis集群
            微服务
              服务注册
              负载均衡
              链路追踪
          运维体系
            容器化
              Docker
              K8s集群
            监控系统
              日志收集
              性能监控
              告警系统
            CI/CD
              自动构建
              自动测试
              自动部署

  # 12. 复杂序列图示例 - 微服务调用
  microservice_sequence:
    name: "微服务调用流程"
    code: |
      sequenceDiagram
        participant C as 客户端
        participant LB as 负载均衡
        participant API as API网关
        participant Auth as 认证服务
        participant Cache as 缓存服务
        participant Order as 订单服务
        participant MQ as 消息队列
        participant DB as 数据库
        
        C->>LB: 1. 请求下单
        LB->>API: 2. 转发请求
        API->>Auth: 3. 认证检查
        
        alt 认证成功
            Auth-->>API: 4. 认证通过
            API->>Cache: 5. 查询缓存
            
            alt 缓存命中
                Cache-->>API: 6a. 返回缓存数据
            else 缓存未命中
                Cache-->>API: 6b. 缓存未命中
                API->>Order: 7. 创建订单
                Order->>DB: 8. 保存订单
                DB-->>Order: 9. 保存成功
                Order->>MQ: 10. 发送订单事件
                Order-->>API: 11. 返回订单信息
                API->>Cache: 12. 更新缓存
            end
            
            API-->>LB: 13. 返回结果
            LB-->>C: 14. 响应客户端
        else 认证失败
            Auth-->>API: 4. 认证失败
            API-->>LB: 5. 返回错误
            LB-->>C: 6. 提示登录
        end

  # 13. 复杂状态图示例 - 工单流转
  ticket_state:
    name: "工单状态流转"
    code: |
      stateDiagram-v2
        [*] --> Created: 创建工单
        state Created {
            [*] --> Pending: 等待处理
            Pending --> Processing: 开始处理
            Processing --> Pending: 需要补充信息
        }
        Created --> Assigned: 分配处理人
        state Assigned {
            [*] --> Analysis: 问题分析
            Analysis --> Development: 需要开发
            Analysis --> Configuration: 需要配置
            Development --> Testing: 完成开发
            Configuration --> Testing: 完成配置
            Testing --> Analysis: 测试不通过
        }
        Assigned --> Resolved: 解决问题
        state Resolved {
            [*] --> Verifying: 等待验证
            Verifying --> Confirmed: 验证通过
            Verifying --> Rejected: 验证不通过
            Rejected --> [*]: 重新处理
        }
        Resolved --> Closed: 关闭工单
        Closed --> [*]

  # 14. 复杂ER图示例 - 电商系统
  ecommerce_er:
    name: "电商系统ER图"
    code: |
      erDiagram
        USER ||--o{ ORDER : places
        USER ||--o{ ADDRESS : has
        USER ||--o{ PAYMENT : uses
        USER {
            string id PK
            string username
            string email
            string phone
            string password_hash
            datetime created_at
            boolean is_active
        }
        ORDER ||--|{ ORDER_ITEM : contains
        ORDER ||--|| PAYMENT : has
        ORDER ||--|| ADDRESS : uses
        ORDER ||--|| COUPON : applies
        ORDER {
            string id PK
            string user_id FK
            string address_id FK
            string payment_id FK
            string coupon_id FK
            decimal total_amount
            string status
            datetime created_at
            datetime updated_at
        }
        PRODUCT ||--o{ ORDER_ITEM : "ordered in"
        PRODUCT ||--o{ PRODUCT_CATEGORY : belongs_to
        PRODUCT {
            string id PK
            string name
            string description
            decimal price
            int stock
            string[] images
            boolean is_active
        }
        PAYMENT {
            string id PK
            string user_id FK
            string type
            string status
            decimal amount
            datetime paid_at
        }
        ADDRESS {
            string id PK
            string user_id FK
            string name
            string phone
            string province
            string city
            string address
            boolean is_default
        }
        COUPON {
            string id PK
            string code
            decimal amount
            datetime valid_from
            datetime valid_to
            int usage_limit
        }

  # 15. 网络拓扑图
  network_diagram:
    name: "系统网络拓扑"
    code: |
      graph TB
        subgraph 互联网
        CLIENT[客户端]
        end
        
        subgraph DMZ区域
        LB[负载均衡]
        WAF[Web防火墙]
        end
        
        subgraph 应用层
        API[API网关]
        WEB1[Web服务器1]
        WEB2[Web服务器2]
        CACHE1[缓存服务器1]
        CACHE2[缓存服务器2]
        end
        
        subgraph 服务层
        APP1[应用服务器1]
        APP2[应用服务器2]
        MQ1[消息队列1]
        MQ2[消息队列2]
        end
        
        subgraph 数据层
        DB_MASTER[主数据库]
        DB_SLAVE1[从数据库1]
        DB_SLAVE2[从数据库2]
        end
        
        CLIENT --> LB
        LB --> WAF
        WAF --> API
        API --> WEB1 & WEB2
        WEB1 & WEB2 --> CACHE1 & CACHE2
        WEB1 & WEB2 --> APP1 & APP2
        APP1 & APP2 --> MQ1 & MQ2
        APP1 & APP2 --> DB_MASTER
        DB_MASTER --> DB_SLAVE1 & DB_SLAVE2

  # 16. 时序图 - 分布式事务
  distributed_transaction:
    name: "分布式事务流程"
    code: |
      sequenceDiagram
        participant C as 协调者
        participant A as 订单服务
        participant B as 库存服务
        participant D as 支付服务
        
        Note over C,D: 分布式事务处理流程
        
        C->>A: 1. 准备阶段-检查订单
        C->>B: 1. 准备阶段-检查库存
        C->>D: 1. 准备阶段-检查支付
        
        alt 全部就绪
            A-->>C: 2a. 准备完成
            B-->>C: 2a. 准备完成
            D-->>C: 2a. 准备完成
            
            C->>A: 3. 提交事务
            C->>B: 3. 提交事务
            C->>D: 3. 提交事务
            
            A-->>C: 4. 完成提交
            B-->>C: 4. 完成提交
            D-->>C: 4. 完成提交
        else 部分失败
            A-->>C: 2b. 准备失败
            B-->>C: 2b. 准备完成
            D-->>C: 2b. 准备完成
            
            C->>A: 3. 回滚事务
            C->>B: 3. 回滚事务
            C->>D: 3. 回滚事务
            
            A-->>C: 4. 完成回滚
            B-->>C: 4. 完成回滚
            D-->>C: 4. 完成回滚
        end

  # 17. 时间线图示例
  timeline:
    name: "产品发布时间线"
    code: |
      timeline
        title 产品迭代发布计划
        section 2024 Q1
          版本1.0发布: 完成核心功能
          : 用户管理
          : 订单系统
          版本1.1发布: 优化性能
          : 引入缓存
          : 优化查询
        section 2024 Q2
          版本2.0发布: 新增功能
          : 支付系统
          : 统计分析
          版本2.1发布: 安全加固
          : 升级认证
          : 加密传输
        section 2024 Q3
          版本3.0发布: 平台化
          : 开放API
          : 插件系统
        section 2024 Q4
          版本4.0发布: 生态化
          : 应用市场
          : 开发者平台

  # 18. 象限图示例
  quadrant:
    name: "技术选型评估"
    code: |
      quadrantChart
        title 技术框架评估
        x-axis 低成本 --> 高成本
        y-axis 低收益 --> 高收益
        quadrant-1 采用
        quadrant-2 评估
        quadrant-3 放弃
        quadrant-4 考虑
        Vue.js: [0.4, 0.8]
        React: [0.6, 0.7]
        Angular: [0.8, 0.6]
        Svelte: [0.3, 0.6]
        Spring Boot: [0.5, 0.9]
        Django: [0.3, 0.7]
        Laravel: [0.4, 0.5]
        Express: [0.2, 0.4]

  # 19. 需求图示例
  requirement:
    name: "系统需求图"
    code: |
      requirementDiagram
        requirement 高可用系统 {
          id: 1
          text: 系统需要保证 99.99% 的可用性
          risk: high
          verifyMethod: test
        }
        
        element 微服务架构 {
          type: 架构设计
          docref: architecture.md
        }
        
        requirement 负载均衡 {
          id: 1.1
          text: 实现多节点负载均衡
          risk: medium
          verifyMethod: inspection
        }
        
        requirement 故障转移 {
          id: 1.2
          text: 支持自动故障转移
          risk: medium
          verifyMethod: test
        }
        
        requirement 数据备份 {
          id: 1.3
          text: 定期数据备份和恢复
          risk: low
          verifyMethod: test
        }
        
        微服务架构 - satisfies -> 高可用系统
        负载均衡 - traces -> 高可用系统
        故障转移 - traces -> 高可用系统
        数据备份 - traces -> 高可用系统

  # 20. 复杂流程图示例 - Git工作流
  git_workflow:
    name: "Git分支策略"
    code: |
      graph TB
        subgraph 主分支
        main[main]
        release[release]
        end
        
        subgraph 开发分支
        develop[develop]
        end
        
        subgraph 特性分支
        feature1[feature/功能1]
        feature2[feature/功能2]
        feature3[feature/功能3]
        end
        
        subgraph 修复分支
        hotfix[hotfix]
        bugfix1[bugfix/问题1]
        bugfix2[bugfix/问题2]
        end
        
        main --> release
        release --> main
        
        develop --> release
        release --> develop
        
        feature1 & feature2 & feature3 --> develop
        develop --> feature1 & feature2 & feature3
        
        hotfix --> main
        hotfix --> release
        hotfix --> develop
        
        bugfix1 & bugfix2 --> develop
        develop --> bugfix1 & bugfix2
        
        style main fill:#f9f,stroke:#333,stroke-width:4px
        style release fill:#bbf,stroke:#333,stroke-width:2px
        style develop fill:#dfd,stroke:#333,stroke-width:2px
        style feature1 fill:#ddd,stroke:#333,stroke-width:1px
        style feature2 fill:#ddd,stroke:#333,stroke-width:1px
        style feature3 fill:#ddd,stroke:#333,stroke-width:1px
        style hotfix fill:#f55,stroke:#333,stroke-width:2px
        style bugfix1 fill:#fdd,stroke:#333,stroke-width:1px
        style bugfix2 fill:#fdd,stroke:#333,stroke-width:1px

  # 21. C4架构图示例
  c4_diagram:
    name: "系统C4架构图"
    code: |
      C4Context
        title 电商系统架构概览
        
        Enterprise_Boundary(b0, "电商平台") {
          Person(customer, "客户", "使用系统的购物者")
          Person(admin, "管理员", "系统管理人员")
          
          System_Boundary(b1, "核心系统") {
            System(web_app, "Web应用", "提供用户界面和交互")
            System(mobile_app, "移动应用", "提供移动端服务")
            System(api_gateway, "API网关", "统一接口管理")
            
            Container_Boundary(b2, "业务服务") {
              Container(user_service, "用户服务", "处理用户相关业务")
              Container(order_service, "订单服务", "处理订单相关业务")
              Container(product_service, "商品服务", "处理商品相关业务")
              Container(payment_service, "支付服务", "处理支付相关业务")
            }
          }
          
          System_Ext(email_system, "邮件系统", "发送通知邮件")
          System_Ext(payment_gateway, "支付网关", "处理支付")
        }
        
        Rel(customer, web_app, "使用", "HTTPS")
        Rel(customer, mobile_app, "使用", "HTTPS")
        Rel(admin, web_app, "管理", "HTTPS")
        
        Rel(web_app, api_gateway, "调用", "JSON/HTTPS")
        Rel(mobile_app, api_gateway, "调用", "JSON/HTTPS")
        
        Rel(api_gateway, user_service, "路由", "JSON/HTTPS")
        Rel(api_gateway, order_service, "路由", "JSON/HTTPS")
        Rel(api_gateway, product_service, "路由", "JSON/HTTPS")
        Rel(api_gateway, payment_service, "路由", "JSON/HTTPS")
        
        Rel(payment_service, payment_gateway, "调用", "HTTPS")
        Rel(order_service, email_system, "发送通知", "SMTP")

# 可以继续添加更多图表... 